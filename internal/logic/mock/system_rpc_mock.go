// Code generated by MockGen. DO NOT EDIT.
// Source: system_rpc.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	systemrpc "github.com/xh-polaris/meowchat-system-rpc/systemrpc"
	grpc "google.golang.org/grpc"
)

// MockSystemRpc is a mock of SystemRpc interface.
type MockSystemRpc struct {
	ctrl     *gomock.Controller
	recorder *MockSystemRpcMockRecorder
}

// MockSystemRpcMockRecorder is the mock recorder for MockSystemRpc.
type MockSystemRpcMockRecorder struct {
	mock *MockSystemRpc
}

// NewMockSystemRpc creates a new mock instance.
func NewMockSystemRpc(ctrl *gomock.Controller) *MockSystemRpc {
	mock := &MockSystemRpc{ctrl: ctrl}
	mock.recorder = &MockSystemRpcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSystemRpc) EXPECT() *MockSystemRpcMockRecorder {
	return m.recorder
}

// ContainsRole mocks base method.
func (m *MockSystemRpc) ContainsRole(ctx context.Context, in *systemrpc.ContainsRoleReq, opts ...grpc.CallOption) (*systemrpc.ContainsRoleResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ContainsRole", varargs...)
	ret0, _ := ret[0].(*systemrpc.ContainsRoleResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainsRole indicates an expected call of ContainsRole.
func (mr *MockSystemRpcMockRecorder) ContainsRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainsRole", reflect.TypeOf((*MockSystemRpc)(nil).ContainsRole), varargs...)
}

// CreateAdmin mocks base method.
func (m *MockSystemRpc) CreateAdmin(ctx context.Context, in *systemrpc.CreateAdminReq, opts ...grpc.CallOption) (*systemrpc.CreateAdminResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAdmin", varargs...)
	ret0, _ := ret[0].(*systemrpc.CreateAdminResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdmin indicates an expected call of CreateAdmin.
func (mr *MockSystemRpcMockRecorder) CreateAdmin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdmin", reflect.TypeOf((*MockSystemRpc)(nil).CreateAdmin), varargs...)
}

// CreateCommunity mocks base method.
func (m *MockSystemRpc) CreateCommunity(ctx context.Context, in *systemrpc.CreateCommunityReq, opts ...grpc.CallOption) (*systemrpc.CreateCommunityResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCommunity", varargs...)
	ret0, _ := ret[0].(*systemrpc.CreateCommunityResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCommunity indicates an expected call of CreateCommunity.
func (mr *MockSystemRpcMockRecorder) CreateCommunity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommunity", reflect.TypeOf((*MockSystemRpc)(nil).CreateCommunity), varargs...)
}

// CreateNews mocks base method.
func (m *MockSystemRpc) CreateNews(ctx context.Context, in *systemrpc.CreateNewsReq, opts ...grpc.CallOption) (*systemrpc.CreateNewsResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNews", varargs...)
	ret0, _ := ret[0].(*systemrpc.CreateNewsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNews indicates an expected call of CreateNews.
func (mr *MockSystemRpcMockRecorder) CreateNews(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNews", reflect.TypeOf((*MockSystemRpc)(nil).CreateNews), varargs...)
}

// CreateNotice mocks base method.
func (m *MockSystemRpc) CreateNotice(ctx context.Context, in *systemrpc.CreateNoticeReq, opts ...grpc.CallOption) (*systemrpc.CreateNoticeResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNotice", varargs...)
	ret0, _ := ret[0].(*systemrpc.CreateNoticeResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotice indicates an expected call of CreateNotice.
func (mr *MockSystemRpcMockRecorder) CreateNotice(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotice", reflect.TypeOf((*MockSystemRpc)(nil).CreateNotice), varargs...)
}

// DeleteAdmin mocks base method.
func (m *MockSystemRpc) DeleteAdmin(ctx context.Context, in *systemrpc.DeleteAdminReq, opts ...grpc.CallOption) (*systemrpc.DeleteAdminResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAdmin", varargs...)
	ret0, _ := ret[0].(*systemrpc.DeleteAdminResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAdmin indicates an expected call of DeleteAdmin.
func (mr *MockSystemRpcMockRecorder) DeleteAdmin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdmin", reflect.TypeOf((*MockSystemRpc)(nil).DeleteAdmin), varargs...)
}

// DeleteCommunity mocks base method.
func (m *MockSystemRpc) DeleteCommunity(ctx context.Context, in *systemrpc.DeleteCommunityReq, opts ...grpc.CallOption) (*systemrpc.DeleteCommunityResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCommunity", varargs...)
	ret0, _ := ret[0].(*systemrpc.DeleteCommunityResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCommunity indicates an expected call of DeleteCommunity.
func (mr *MockSystemRpcMockRecorder) DeleteCommunity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommunity", reflect.TypeOf((*MockSystemRpc)(nil).DeleteCommunity), varargs...)
}

// DeleteNews mocks base method.
func (m *MockSystemRpc) DeleteNews(ctx context.Context, in *systemrpc.DeleteNewsReq, opts ...grpc.CallOption) (*systemrpc.DeleteNewsResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNews", varargs...)
	ret0, _ := ret[0].(*systemrpc.DeleteNewsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNews indicates an expected call of DeleteNews.
func (mr *MockSystemRpcMockRecorder) DeleteNews(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNews", reflect.TypeOf((*MockSystemRpc)(nil).DeleteNews), varargs...)
}

// DeleteNotice mocks base method.
func (m *MockSystemRpc) DeleteNotice(ctx context.Context, in *systemrpc.DeleteNoticeReq, opts ...grpc.CallOption) (*systemrpc.DeleteNoticeResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNotice", varargs...)
	ret0, _ := ret[0].(*systemrpc.DeleteNoticeResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNotice indicates an expected call of DeleteNotice.
func (mr *MockSystemRpcMockRecorder) DeleteNotice(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotice", reflect.TypeOf((*MockSystemRpc)(nil).DeleteNotice), varargs...)
}

// ListAdmin mocks base method.
func (m *MockSystemRpc) ListAdmin(ctx context.Context, in *systemrpc.ListAdminReq, opts ...grpc.CallOption) (*systemrpc.ListAdminResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAdmin", varargs...)
	ret0, _ := ret[0].(*systemrpc.ListAdminResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAdmin indicates an expected call of ListAdmin.
func (mr *MockSystemRpcMockRecorder) ListAdmin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAdmin", reflect.TypeOf((*MockSystemRpc)(nil).ListAdmin), varargs...)
}

// ListCommunity mocks base method.
func (m *MockSystemRpc) ListCommunity(ctx context.Context, in *systemrpc.ListCommunityReq, opts ...grpc.CallOption) (*systemrpc.ListCommunityResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCommunity", varargs...)
	ret0, _ := ret[0].(*systemrpc.ListCommunityResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommunity indicates an expected call of ListCommunity.
func (mr *MockSystemRpcMockRecorder) ListCommunity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommunity", reflect.TypeOf((*MockSystemRpc)(nil).ListCommunity), varargs...)
}

// ListNews mocks base method.
func (m *MockSystemRpc) ListNews(ctx context.Context, in *systemrpc.ListNewsReq, opts ...grpc.CallOption) (*systemrpc.ListNewsResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNews", varargs...)
	ret0, _ := ret[0].(*systemrpc.ListNewsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNews indicates an expected call of ListNews.
func (mr *MockSystemRpcMockRecorder) ListNews(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNews", reflect.TypeOf((*MockSystemRpc)(nil).ListNews), varargs...)
}

// ListNotice mocks base method.
func (m *MockSystemRpc) ListNotice(ctx context.Context, in *systemrpc.ListNoticeReq, opts ...grpc.CallOption) (*systemrpc.ListNoticeResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNotice", varargs...)
	ret0, _ := ret[0].(*systemrpc.ListNoticeResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotice indicates an expected call of ListNotice.
func (mr *MockSystemRpcMockRecorder) ListNotice(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotice", reflect.TypeOf((*MockSystemRpc)(nil).ListNotice), varargs...)
}

// RetrieveAdmin mocks base method.
func (m *MockSystemRpc) RetrieveAdmin(ctx context.Context, in *systemrpc.RetrieveAdminReq, opts ...grpc.CallOption) (*systemrpc.RetrieveAdminResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveAdmin", varargs...)
	ret0, _ := ret[0].(*systemrpc.RetrieveAdminResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveAdmin indicates an expected call of RetrieveAdmin.
func (mr *MockSystemRpcMockRecorder) RetrieveAdmin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAdmin", reflect.TypeOf((*MockSystemRpc)(nil).RetrieveAdmin), varargs...)
}

// RetrieveCommunity mocks base method.
func (m *MockSystemRpc) RetrieveCommunity(ctx context.Context, in *systemrpc.RetrieveCommunityReq, opts ...grpc.CallOption) (*systemrpc.RetrieveCommunityResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveCommunity", varargs...)
	ret0, _ := ret[0].(*systemrpc.RetrieveCommunityResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveCommunity indicates an expected call of RetrieveCommunity.
func (mr *MockSystemRpcMockRecorder) RetrieveCommunity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveCommunity", reflect.TypeOf((*MockSystemRpc)(nil).RetrieveCommunity), varargs...)
}

// RetrieveNews mocks base method.
func (m *MockSystemRpc) RetrieveNews(ctx context.Context, in *systemrpc.RetrieveNewsReq, opts ...grpc.CallOption) (*systemrpc.RetrieveNewsResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveNews", varargs...)
	ret0, _ := ret[0].(*systemrpc.RetrieveNewsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveNews indicates an expected call of RetrieveNews.
func (mr *MockSystemRpcMockRecorder) RetrieveNews(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveNews", reflect.TypeOf((*MockSystemRpc)(nil).RetrieveNews), varargs...)
}

// RetrieveNotice mocks base method.
func (m *MockSystemRpc) RetrieveNotice(ctx context.Context, in *systemrpc.RetrieveNoticeReq, opts ...grpc.CallOption) (*systemrpc.RetrieveNoticeResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveNotice", varargs...)
	ret0, _ := ret[0].(*systemrpc.RetrieveNoticeResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveNotice indicates an expected call of RetrieveNotice.
func (mr *MockSystemRpcMockRecorder) RetrieveNotice(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveNotice", reflect.TypeOf((*MockSystemRpc)(nil).RetrieveNotice), varargs...)
}

// RetrieveUserRole mocks base method.
func (m *MockSystemRpc) RetrieveUserRole(ctx context.Context, in *systemrpc.RetrieveUserRoleReq, opts ...grpc.CallOption) (*systemrpc.RetrieveUserRoleResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveUserRole", varargs...)
	ret0, _ := ret[0].(*systemrpc.RetrieveUserRoleResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveUserRole indicates an expected call of RetrieveUserRole.
func (mr *MockSystemRpcMockRecorder) RetrieveUserRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveUserRole", reflect.TypeOf((*MockSystemRpc)(nil).RetrieveUserRole), varargs...)
}

// UpdateAdmin mocks base method.
func (m *MockSystemRpc) UpdateAdmin(ctx context.Context, in *systemrpc.UpdateAdminReq, opts ...grpc.CallOption) (*systemrpc.UpdateAdminResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAdmin", varargs...)
	ret0, _ := ret[0].(*systemrpc.UpdateAdminResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAdmin indicates an expected call of UpdateAdmin.
func (mr *MockSystemRpcMockRecorder) UpdateAdmin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdmin", reflect.TypeOf((*MockSystemRpc)(nil).UpdateAdmin), varargs...)
}

// UpdateCommunity mocks base method.
func (m *MockSystemRpc) UpdateCommunity(ctx context.Context, in *systemrpc.UpdateCommunityReq, opts ...grpc.CallOption) (*systemrpc.UpdateCommunityResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCommunity", varargs...)
	ret0, _ := ret[0].(*systemrpc.UpdateCommunityResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCommunity indicates an expected call of UpdateCommunity.
func (mr *MockSystemRpcMockRecorder) UpdateCommunity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCommunity", reflect.TypeOf((*MockSystemRpc)(nil).UpdateCommunity), varargs...)
}

// UpdateNews mocks base method.
func (m *MockSystemRpc) UpdateNews(ctx context.Context, in *systemrpc.UpdateNewsReq, opts ...grpc.CallOption) (*systemrpc.UpdateNewsResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNews", varargs...)
	ret0, _ := ret[0].(*systemrpc.UpdateNewsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNews indicates an expected call of UpdateNews.
func (mr *MockSystemRpcMockRecorder) UpdateNews(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNews", reflect.TypeOf((*MockSystemRpc)(nil).UpdateNews), varargs...)
}

// UpdateNotice mocks base method.
func (m *MockSystemRpc) UpdateNotice(ctx context.Context, in *systemrpc.UpdateNoticeReq, opts ...grpc.CallOption) (*systemrpc.UpdateNoticeResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNotice", varargs...)
	ret0, _ := ret[0].(*systemrpc.UpdateNoticeResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNotice indicates an expected call of UpdateNotice.
func (mr *MockSystemRpcMockRecorder) UpdateNotice(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotice", reflect.TypeOf((*MockSystemRpc)(nil).UpdateNotice), varargs...)
}

// UpdateUserRole mocks base method.
func (m *MockSystemRpc) UpdateUserRole(ctx context.Context, in *systemrpc.UpdateUserRoleReq, opts ...grpc.CallOption) (*systemrpc.UpdateUserRoleResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserRole", varargs...)
	ret0, _ := ret[0].(*systemrpc.UpdateUserRoleResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserRole indicates an expected call of UpdateUserRole.
func (mr *MockSystemRpcMockRecorder) UpdateUserRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRole", reflect.TypeOf((*MockSystemRpc)(nil).UpdateUserRole), varargs...)
}
