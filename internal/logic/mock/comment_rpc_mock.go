// Code generated by MockGen. DO NOT EDIT.
// Source: comment_rpc.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	commentrpc "github.com/xh-polaris/meowchat-comment-rpc/commentrpc"
	grpc "google.golang.org/grpc"
)

// MockCommentRpc is a mock of CommentRpc interface.
type MockCommentRpc struct {
	ctrl     *gomock.Controller
	recorder *MockCommentRpcMockRecorder
}

// MockCommentRpcMockRecorder is the mock recorder for MockCommentRpc.
type MockCommentRpcMockRecorder struct {
	mock *MockCommentRpc
}

// NewMockCommentRpc creates a new mock instance.
func NewMockCommentRpc(ctrl *gomock.Controller) *MockCommentRpc {
	mock := &MockCommentRpc{ctrl: ctrl}
	mock.recorder = &MockCommentRpcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentRpc) EXPECT() *MockCommentRpcMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockCommentRpc) CreateComment(ctx context.Context, in *commentrpc.CreateCommentRequest, opts ...grpc.CallOption) (*commentrpc.CreateCommentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateComment", varargs...)
	ret0, _ := ret[0].(*commentrpc.CreateCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentRpcMockRecorder) CreateComment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCommentRpc)(nil).CreateComment), varargs...)
}

// DeleteComment mocks base method.
func (m *MockCommentRpc) DeleteComment(ctx context.Context, in *commentrpc.DeleteCommentByIdRequest, opts ...grpc.CallOption) (*commentrpc.DeleteCommentByIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteComment", varargs...)
	ret0, _ := ret[0].(*commentrpc.DeleteCommentByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCommentRpcMockRecorder) DeleteComment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockCommentRpc)(nil).DeleteComment), varargs...)
}

// ListCommentByAuthorIdAndType mocks base method.
func (m *MockCommentRpc) ListCommentByAuthorIdAndType(ctx context.Context, in *commentrpc.ListCommentByAuthorIdAndTypeRequest, opts ...grpc.CallOption) (*commentrpc.ListCommentByAuthorIdAndTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCommentByAuthorIdAndType", varargs...)
	ret0, _ := ret[0].(*commentrpc.ListCommentByAuthorIdAndTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommentByAuthorIdAndType indicates an expected call of ListCommentByAuthorIdAndType.
func (mr *MockCommentRpcMockRecorder) ListCommentByAuthorIdAndType(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommentByAuthorIdAndType", reflect.TypeOf((*MockCommentRpc)(nil).ListCommentByAuthorIdAndType), varargs...)
}

// ListCommentByParent mocks base method.
func (m *MockCommentRpc) ListCommentByParent(ctx context.Context, in *commentrpc.ListCommentByParentRequest, opts ...grpc.CallOption) (*commentrpc.ListCommentByParentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCommentByParent", varargs...)
	ret0, _ := ret[0].(*commentrpc.ListCommentByParentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommentByParent indicates an expected call of ListCommentByParent.
func (mr *MockCommentRpcMockRecorder) ListCommentByParent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommentByParent", reflect.TypeOf((*MockCommentRpc)(nil).ListCommentByParent), varargs...)
}

// ListCommentByReplyToAndType mocks base method.
func (m *MockCommentRpc) ListCommentByReplyToAndType(ctx context.Context, in *commentrpc.ListCommentByReplyToAndTypeRequest, opts ...grpc.CallOption) (*commentrpc.ListCommentByReplyToAndTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCommentByReplyToAndType", varargs...)
	ret0, _ := ret[0].(*commentrpc.ListCommentByReplyToAndTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommentByReplyToAndType indicates an expected call of ListCommentByReplyToAndType.
func (mr *MockCommentRpcMockRecorder) ListCommentByReplyToAndType(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommentByReplyToAndType", reflect.TypeOf((*MockCommentRpc)(nil).ListCommentByReplyToAndType), varargs...)
}

// RetrieveCommentById mocks base method.
func (m *MockCommentRpc) RetrieveCommentById(ctx context.Context, in *commentrpc.RetrieveCommentByIdRequest, opts ...grpc.CallOption) (*commentrpc.RetrieveCommentByIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveCommentById", varargs...)
	ret0, _ := ret[0].(*commentrpc.RetrieveCommentByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveCommentById indicates an expected call of RetrieveCommentById.
func (mr *MockCommentRpcMockRecorder) RetrieveCommentById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveCommentById", reflect.TypeOf((*MockCommentRpc)(nil).RetrieveCommentById), varargs...)
}

// UpdateComment mocks base method.
func (m *MockCommentRpc) UpdateComment(ctx context.Context, in *commentrpc.UpdateCommentRequest, opts ...grpc.CallOption) (*commentrpc.UpdateCommentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateComment", varargs...)
	ret0, _ := ret[0].(*commentrpc.UpdateCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockCommentRpcMockRecorder) UpdateComment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockCommentRpc)(nil).UpdateComment), varargs...)
}
