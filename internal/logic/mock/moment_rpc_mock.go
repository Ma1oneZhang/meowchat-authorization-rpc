// Code generated by MockGen. DO NOT EDIT.
// Source: moment_rpc.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	momentrpc "github.com/xh-polaris/meowchat-moment-rpc/momentrpc"
	grpc "google.golang.org/grpc"
)

// MockMomentRpc is a mock of MomentRpc interface.
type MockMomentRpc struct {
	ctrl     *gomock.Controller
	recorder *MockMomentRpcMockRecorder
}

// MockMomentRpcMockRecorder is the mock recorder for MockMomentRpc.
type MockMomentRpcMockRecorder struct {
	mock *MockMomentRpc
}

// NewMockMomentRpc creates a new mock instance.
func NewMockMomentRpc(ctrl *gomock.Controller) *MockMomentRpc {
	mock := &MockMomentRpc{ctrl: ctrl}
	mock.recorder = &MockMomentRpcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMomentRpc) EXPECT() *MockMomentRpcMockRecorder {
	return m.recorder
}

// CreateMoment mocks base method.
func (m *MockMomentRpc) CreateMoment(ctx context.Context, in *momentrpc.CreateMomentReq, opts ...grpc.CallOption) (*momentrpc.CreateMomentResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMoment", varargs...)
	ret0, _ := ret[0].(*momentrpc.CreateMomentResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMoment indicates an expected call of CreateMoment.
func (mr *MockMomentRpcMockRecorder) CreateMoment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMoment", reflect.TypeOf((*MockMomentRpc)(nil).CreateMoment), varargs...)
}

// DeleteMoment mocks base method.
func (m *MockMomentRpc) DeleteMoment(ctx context.Context, in *momentrpc.DeleteMomentReq, opts ...grpc.CallOption) (*momentrpc.DeleteMomentResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMoment", varargs...)
	ret0, _ := ret[0].(*momentrpc.DeleteMomentResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMoment indicates an expected call of DeleteMoment.
func (mr *MockMomentRpcMockRecorder) DeleteMoment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMoment", reflect.TypeOf((*MockMomentRpc)(nil).DeleteMoment), varargs...)
}

// ListMoment mocks base method.
func (m *MockMomentRpc) ListMoment(ctx context.Context, in *momentrpc.ListMomentReq, opts ...grpc.CallOption) (*momentrpc.ListMomentResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMoment", varargs...)
	ret0, _ := ret[0].(*momentrpc.ListMomentResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMoment indicates an expected call of ListMoment.
func (mr *MockMomentRpcMockRecorder) ListMoment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMoment", reflect.TypeOf((*MockMomentRpc)(nil).ListMoment), varargs...)
}

// RetrieveMoment mocks base method.
func (m *MockMomentRpc) RetrieveMoment(ctx context.Context, in *momentrpc.RetrieveMomentReq, opts ...grpc.CallOption) (*momentrpc.RetrieveMomentResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveMoment", varargs...)
	ret0, _ := ret[0].(*momentrpc.RetrieveMomentResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveMoment indicates an expected call of RetrieveMoment.
func (mr *MockMomentRpcMockRecorder) RetrieveMoment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveMoment", reflect.TypeOf((*MockMomentRpc)(nil).RetrieveMoment), varargs...)
}

// SearchMoment mocks base method.
func (m *MockMomentRpc) SearchMoment(ctx context.Context, in *momentrpc.SearchMomentReq, opts ...grpc.CallOption) (*momentrpc.SearchMomentResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchMoment", varargs...)
	ret0, _ := ret[0].(*momentrpc.SearchMomentResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMoment indicates an expected call of SearchMoment.
func (mr *MockMomentRpcMockRecorder) SearchMoment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMoment", reflect.TypeOf((*MockMomentRpc)(nil).SearchMoment), varargs...)
}

// UpdateMoment mocks base method.
func (m *MockMomentRpc) UpdateMoment(ctx context.Context, in *momentrpc.UpdateMomentReq, opts ...grpc.CallOption) (*momentrpc.UpdateMomentResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMoment", varargs...)
	ret0, _ := ret[0].(*momentrpc.UpdateMomentResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMoment indicates an expected call of UpdateMoment.
func (mr *MockMomentRpcMockRecorder) UpdateMoment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMoment", reflect.TypeOf((*MockMomentRpc)(nil).UpdateMoment), varargs...)
}
